#!/usr/bin/env python3
"""
Test script to verify the improvements made to the Alpha Sentinel system
"""

import asyncio
import sys
import os

# Add src to path
sys.path.append("src")

async def test_improvements():
    """Test the improvements made to the system"""
    
    print("üß™ Testing Alpha Sentinel Improvements")
    print("=" * 50)
    
    try:
        # Test 1: Exchange Data Collection
        print("1. Testing Improved Exchange Data Collection...")
        from data_pipeline.exchange_collector import ExchangeDataCollector
        
        exchange_config = {"binance": {"sandbox": True}}
        collector = ExchangeDataCollector(exchange_config)
        
        # Test real-time data
        data = await collector.fetch_real_time_data("BTC/USDT")
        if data:
            print("   ‚úÖ Real-time data collection successful")
            print(f"   üìä BTC/USDT Current Price: ${data['close']:,.2f}")
            print(f"   üìà High: ${data['high']:,.2f}")
            print(f"   üìâ Low: ${data['low']:,.2f}")
            print(f"   üìä Open: ${data['open']:,.2f}")
            print(f"   üìä Volume: {data['volume']:,.2f}")
            
            # Validate price logic
            if data['high'] >= max(data['open'], data['close']):
                print("   ‚úÖ High price validation: PASSED")
            else:
                print("   ‚ùå High price validation: FAILED")
                
            if data['low'] <= min(data['open'], data['close']):
                print("   ‚úÖ Low price validation: PASSED")
            else:
                print("   ‚ùå Low price validation: FAILED")
        else:
            print("   ‚ùå Real-time data collection failed")
            
        # Test 2: Historical Data
        print("\n2. Testing Historical Data Collection...")
        historical_data = await collector.fetch_historical_data("BTC/USDT", "1h", 1)
        if not historical_data.empty:
            print("   ‚úÖ Historical data collection successful")
            print(f"   üìä Fetched {len(historical_data)} records")
            print(f"   üìà Price range: ${historical_data['low'].min():.2f} - ${historical_data['high'].max():.2f}")
            
            # Check for outliers
            median_price = historical_data['close'].median()
            outliers = historical_data[
                (historical_data['close'] < median_price * 0.2) | 
                (historical_data['close'] > median_price * 5)
            ]
            if len(outliers) == 0:
                print("   ‚úÖ No extreme outliers detected")
            else:
                print(f"   ‚ö†Ô∏è  {len(outliers)} potential outliers detected")
        else:
            print("   ‚ùå Historical data collection failed")
            
        # Test 3: Database Validation
        print("\n3. Testing Database Validation...")
        from config.database import DatabaseManager
        
        db_manager = DatabaseManager()
        
        # Test data validation
        test_data = {
            "symbol": "BTC/USDT",
            "timestamp": "2025-08-16T15:00:00",
            "open": 117000.0,
            "high": 118000.0,
            "low": 116000.0,
            "close": 117500.0,
            "volume": 1000.0
        }
        
        is_valid, message = db_manager.validate_market_data(test_data)
        if is_valid:
            print("   ‚úÖ Data validation: PASSED")
        else:
            print(f"   ‚ùå Data validation: FAILED: {message}")
            
        # Test invalid data
        invalid_data = {
            "symbol": "BTC/USDT",
            "timestamp": "2025-08-16T15:00:00",
            "open": 117000.0,
            "high": 115000.0,  # High < Open (invalid)
            "low": 116000.0,
            "close": 117500.0,
            "volume": 1000.0
        }
        
        is_valid, message = db_manager.validate_market_data(invalid_data)
        if not is_valid:
            print("   ‚úÖ Invalid data detection: PASSED")
        else:
            print("   ‚ùå Invalid data detection: FAILED")
            
        # Test 4: Multiple Price Fetching
        print("\n4. Testing Multiple Price Fetching...")
        prices = await collector.get_multiple_prices(["BTC/USDT", "ETH/USDT"])
        for symbol, price in prices.items():
            if price:
                print(f"   ‚úÖ {symbol}: ${price:,.2f}")
            else:
                print(f"   ‚ùå {symbol}: Failed to fetch price")
                
        print("\n" + "=" * 50)
        print("üéâ Improvement testing completed!")
        
        # Summary
        print("\nüìã Summary of Improvements Made:")
        print("   ‚úÖ Enhanced data validation and cleaning")
        print("   ‚úÖ Improved OHLCV data structure handling")
        print("   ‚úÖ Better outlier detection and removal")
        print("   ‚úÖ Fixed timezone issues")
        print("   ‚úÖ Enhanced candlestick chart implementation")
        print("   ‚úÖ Improved price accuracy through better data sources")
        
    except Exception as e:
        print(f"   ‚ùå Error during testing: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(test_improvements())
